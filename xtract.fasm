; xtract
; Copyright (C) 2016  LunarFlint

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

format PE GUI 4.0

entry _main

include 'win32wx.inc'

section '.data' data readable writeable

	infoMsgCap	TCHAR		'Info', 0
	infoMsg		TCHAR		'xtract ver 1.0.0', 0Ah, 0Dh, 'By LunarFlint 2016', 0



	mainWcName	TCHAR 		'XTRACT_MAIN_WIN_CLASS', 0
	mainWc		WNDCLASSEX 	sizeof.WNDCLASSEX, CS_HREDRAW + CS_VREDRAW, MainWndProc, 0, 0, NULL, NULL, NULL, NULL, NULL, mainWcName, NULL

	toolWcName	TCHAR 		'XTRACT_TOOL_WIN_CLASS', 0
	toolWc		WNDCLASSEX 	sizeof.WNDCLASSEX, 0, ToolWndProc, 0, 0, NULL, NULL, NULL, NULL, NULL, toolWcName, NULL

	buttonWcName	TCHAR 		'BUTTON', 0

	wTitle		TCHAR 		'xtract', 0
	errorTxt 	TCHAR 		'error', 0

	btnC		TCHAR		'c', 0
	btnS		TCHAR		's', 0
	btnI		TCHAR		'i', 0
	btnX		TCHAR		'x', 0

	msg		MSG
	ps		PAINTSTRUCT

	mainWin		dd		NULL
	toolWin		dd		NULL

	bgPen		dd		?
	bgBrush		dd		?

	borderWidth	dd		5


section '.code' code readable executable

	_main:
		;gdi pens and brushes
		invoke CreatePen, PS_DASH, 1, 12345
		mov [bgPen], eax
		or eax, eax
		jz .err

		invoke CreateSolidBrush, 0
		mov [bgBrush], eax
		or eax, eax
		jz .err


		;win classes
		invoke GetModuleHandle, 0
		mov [mainWc.hInstance], eax
		mov [toolWc.hInstance], eax

		invoke RegisterClassEx, mainWc
		or eax, eax
		jz .err

		invoke RegisterClassEx, toolWc
		or eax, eax
		jz .err

		;create windows
		;note: lparam = 1337 for main win in WM_CREATE
		invoke CreateWindowEx, WS_EX_TOPMOST + WS_EX_LAYERED, mainWcName, wTitle, WS_POPUP, 300, 300, 300, 300, NULL, NULL, [mainWc.hInstance], 1337
		mov [mainWin], eax
		or eax, eax
		jz .err

		invoke SetLayeredWindowAttributes, [mainWin], 0, 127, LWA_ALPHA

		invoke ShowWindow, [mainWin], SW_SHOWNORMAL
		invoke UpdateWindow, [mainWin]

		@@:
			invoke GetMessage, msg, NULL, 0, 0
			or eax, eax
			jz .quit
			
			invoke TranslateMessage, msg
			invoke DispatchMessage, msg
			jmp @b


		.err:
			invoke MessageBox, NULL, errorTxt, NULL, MB_ICONERROR + MB_OK

		.quit:
			invoke DeleteObject, [bgPen]
			invoke DeleteObject, [bgBrush]
			invoke ExitProcess, 0

	
	proc MainWndProc hwnd, msgCode, wparam, lparam
	_MainWndProc:

		locals
			r	RECT
		endl

		cmp [msgCode], WM_NCHITTEST
		je .wmNcHitTest
		cmp [msgCode], WM_PAINT
		je .wmPaint
		cmp [msgCode], WM_CREATE
		je .wmCreate
		cmp [msgCode], WM_DESTROY
		je .wmDestroy
		
		.defWndProc:
			invoke DefWindowProc, [hwnd], [msgCode], [wparam], [lparam]
			jmp .wndProcEnd

		.wmNcHitTest:
			invoke GetWindowRect, [hwnd], addr r

			;instruction interleaved
			mov eax, [lparam]
			mov ecx, [lparam]
			and eax, 0000FFFFh
			shr ecx, 16

			sub [r.right], 1
			sub [r.bottom], 1
			sub [r.right], eax
			sub [r.bottom], ecx
			sub eax, [r.left]
			sub ecx, [r.top]
			mov [r.left], eax
			mov [r.top], ecx

			;tricky if condition. For details, check the value of HTTOP, HTBOTTOM, etc.
			mov eax, 9
			xor ecx, ecx
			
			cmp [r.right], 5
			jge @f
				add eax, 2 	; [r.right] < borderWidth
			jmp .ifend1
			@@:
			cmp [r.left], 5
			jge @f
				inc eax		; [r.left] < borderWidth
			jmp .ifend1
			@@:
				inc ecx		; otherwise
			.ifend1:

			cmp [r.bottom], 5
			jge @f
				add eax, 6	; [r.bottom] < borderWidth
			jmp .ifend2
			@@:
			cmp [r.top], 5
			jge @f
				add eax, 3	; [r.top] < borderWidth
			jmp .ifend2
			@@:
				inc ecx		; otherwise
			.ifend2:

			;fix the base case
			cmp ecx, 2
			cmove eax, ecx ; 2 = HTCAPTION

			jmp .wndProcEnd

		.wmPaint:
			push ebx esi edi	;for storing dc, w, h

			invoke GetWindowRect, [hwnd], addr r
			mov esi, [r.right]
			mov edi, [r.bottom]
			sub esi, [r.left]
			sub edi, [r.top]

			invoke BeginPaint, [hwnd], ps
			mov ebx, eax

			invoke SelectObject, ebx, [bgPen]
			invoke SelectObject, ebx, [bgBrush]

			invoke FillRect, ebx, ps.rcPaint, COLOR_WINDOW + 1

			invoke Rectangle, ebx, 0, 0, esi, edi

			invoke EndPaint, [hwnd], ps

			pop edi esi ebx

			xor eax, eax
			jmp .wndProcEnd

		.wmCreate:
			invoke CreateWindowEx, 0, toolWcName, wTitle, WS_CHILD + WS_VISIBLE, 10, 10, 100, 40, [hwnd], NULL, [toolWc.hInstance], NULL
			jmp .defWndProc

		.wmDestroy:
			invoke PostQuitMessage, 0
			xor eax, eax

		.wndProcEnd:
			ret
	endp

	proc ToolWndProc hwnd, msgCode, wparam, lparam
	_ToolWndProc:
		cmp [msgCode], WM_CREATE
		je .wmCreate
		cmp [msgCode], WM_COMMAND
		je .wmCommand

		.defWndProc:
			invoke DefWindowProc, [hwnd], [msgCode], [wparam], [lparam]
			jmp .wndProcEnd

		.wmCreate:
			invoke CreateWindowEx, 0, buttonWcName, btnC, WS_CHILD + WS_VISIBLE, 10, 10, 20, 20, [hwnd], 1001, [toolWc.hInstance], NULL
			;not implemented invoke CreateWindowEx, 0, buttonWcName, btnS, WS_CHILD + WS_VISIBLE, 30, 10, 20, 20, [hwnd], 1002, [toolWc.hInstance], NULL
			invoke CreateWindowEx, 0, buttonWcName, btnI, WS_CHILD + WS_VISIBLE, 50, 10, 20, 20, [hwnd], 1003, [toolWc.hInstance], NULL
			invoke CreateWindowEx, 0, buttonWcName, btnX, WS_CHILD + WS_VISIBLE, 70, 10, 20, 20, [hwnd], 1004, [toolWc.hInstance], NULL
			jmp .defWndProc

		.wmCommand:
			mov eax, [wparam]
			;mov ecx, [wparam]
			and eax, 0000FFFFh
			;shr ecx, 16

			sub eax, 1001
			cmp eax, 4	; check out of bound
			jnb .defWndProc
			
			lea eax, [eax*4 + @f]
			jmp DWORD[eax]

			@@: ;jump table
			dd .btnC, .btnS, .btnI, .btnX

			.btnC:
				stdcall Capture, [mainWin]
				jmp @f
			.btnS:
				;not implemented
				jmp @f
			.btnI:
				invoke MessageBox, [mainWin], infoMsg, infoMsgCap, MB_ICONINFORMATION + MB_OK
				jmp @f
			.btnX:
				invoke SendMessage, [mainWin], WM_CLOSE, NULL, NULL
				jmp @f

			@@:
				xor eax, eax

		.wndProcEnd:
			ret
	endp

	proc Capture, hwnd:DWORD
	_Capture:
		locals
			r	RECT
			srcDc	dd	?
			destDc	dd	?
		endl

		push ebx esi edi	;for storing bitmap, w, h

		invoke GetWindowRect, [hwnd], addr r
		mov esi, [r.right]
		mov edi, [r.bottom]
		sub esi, [r.left]
		sub edi, [r.top]

		invoke GetDC, NULL
		mov [srcDc], eax

		invoke CreateCompatibleDC, eax
		mov [destDc], eax

		invoke CreateCompatibleBitmap, [srcDc], esi, edi
		mov ebx, eax

		invoke SelectObject, [destDc], eax

		invoke ShowWindow, [mainWin], SW_MINIMIZE

		invoke BitBlt, [destDc], 0, 0, esi, edi, [srcDc], [r.left], [r.top], SRCCOPY

		invoke ShowWindow, [mainWin], SW_RESTORE

		invoke ReleaseDC, NULL, [srcDc]

		invoke DeleteDC, [destDc]


		invoke OpenClipboard, [mainWin]

		invoke EmptyClipboard

		invoke SetClipboardData, CF_BITMAP, ebx

		invoke CloseClipboard

		pop edi esi ebx

		xor eax, eax
		ret
	endp


section '.idata' import data readable
	library kernel32, 	'KERNEL32.DLL', \
		user32, 	'USER32.DLL',	\
		gdi32,		'GDI32.DLL'
	
	include 'api/kernel32.inc'
	include 'api/user32.inc'
	include 'api/gdi32.inc'

